import json
import re
import threading

from dotenv import dotenv_values
import time
from users import Users

from utility import mess_wait, user_bd, SearchHotel
from telebot import TeleBot, types, apihelper
import requests

config = dotenv_values(".env")
bot = TeleBot(config['TELEGRAM_API_TOKEN'])
info = '‚óè /help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n' \
       '‚óè /lowprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /highprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /bestdeal ‚Äî –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n'


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    if not user_bd.get(message.from_user.id):
        user_bd[message.from_user.id] = Users(message.from_user.id)
    if message.from_user.username:
        username = message.from_user.username
    else:
        username = ''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itembtna = types.KeyboardButton('üè®–ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å')
    itembtnv = types.KeyboardButton('üìó –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')
    itembtnd = types.KeyboardButton('üöß –û —Å–µ—Ä–≤–∏—Å–µ')
    markup.row(itembtna, itembtnv)
    markup.row(itembtnd)
    if message.text == '/start':
        user_bd[message.from_user.id] = Users(message.from_user.id)
        print(user_bd[message.from_user.id])
        start_help_text = f"–ü—Ä–∏–≤–µ—Ç {username}, —è –ë–û–¢ Too Easy Travel‚úÖ,\n" \
                          "–ò —è —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –æ—Ç–µ–ª—å üè®"
        bot.send_message(message.from_user.id, start_help_text, reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, info, reply_markup=markup)


@bot.message_handler(content_types=['text', 'document', 'audio', 'photo'])
def get_text_messages(message):
    if not user_bd.get(message.from_user.id):
        user_bd[message.from_user.id] = Users(message.from_user.id)
    if message.text == 'üè®–ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å':
        markup = types.InlineKeyboardMarkup()
        low_price = types.InlineKeyboardButton(text='–°–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –≤ –≥–æ—Ä–æ–¥–µ', callback_data='/lowprice')
        high_price = types.InlineKeyboardButton(text='–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –≤ –≥–æ—Ä–æ–¥–µ', callback_data='/highprice')
        best_deal = types.InlineKeyboardButton(text='—Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞',
                                               callback_data='/bestdeal')
        markup.add(low_price, high_price, best_deal, row_width=True)
        massage_info = bot.send_message(message.from_user.id, "üîé –≤—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞", reply_markup=markup)
        user_bd[message.from_user.id].config['id_last_messages'] = massage_info.message_id
    elif message.text == 'üìó –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ':
        bot.send_message(message.from_user.id, info)

    # elif message.text == '/lowprice':
    #     """–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è:
    #     1. –ì–æ—Ä–æ–¥, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫.
    #     2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–Ω–µ –±–æ–ª—å—à–µ
    #     –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞).
    #     """
    #     print('–¢—É—Ç –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ lowprice')
    # elif message.text == '/highprice':
    #     """–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è:
    #     1. –ì–æ—Ä–æ–¥, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫.
    #     2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–Ω–µ –±–æ–ª—å—à–µ
    #     –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞).
    #     """
    #     print('–¢—É—Ç –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ highprice')
    # elif message.text == '/bestdeal':
    #     """
    #     –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è:
    #     1. –ì–æ—Ä–æ–¥, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫.
    #     2. –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω.
    #     3. –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç–µ–ª—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.
    #     4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–Ω–µ –±–æ–ª—å—à–µ
    #     –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞).
    #     """
    #     print('–¢—É—Ç –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ bestdeal')
    elif user_bd[message.from_user.id].config['bool_city'] and not user_bd[message.from_user.id].config[
        'check_choice_city'] and not user_bd[message.from_user.id].config['count_hotels']:
        # user_bd[message.from_user.id].config['bool_city'] = False
        user_bd[message.from_user.id].config['check_choice_city'] = True
        SearchHotel.search_city_data(bot, message)

    elif user_bd[message.from_user.id].config['check_choice_city'] \
            and user_bd[message.from_user.id].config['bool_city'] \
            and not user_bd[message.from_user.id].config['count_hotels']:
        user_bd[message.from_user.id].config['count_hotels'] = int(message.text)
        print("–∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π", user_bd[message.from_user.id].config['count_hotels'])
        SearchHotel.search_hotels(bot, message)

    # elif user_bd[message.from_user.id].config['check_choice_city'] \
    #         and user_bd[message.from_user.id].config['bool_city'] \
    #         and user_bd[message.from_user.id].config['count_hotels']:




@bot.callback_query_handler(func=lambda c: True)
def inline(c):
    if c.data == '/lowprice':
        print('/lowprice salam')
        user_bd[c.message.chat.id].config['search_price_filter'] = 'lowprice'
        bot.send_message(user_bd[c.message.chat.id].id_user, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å ?")
        apihelper.delete_message(config['TELEGRAM_API_TOKEN'], user_bd[c.message.chat.id].id_user,
                                 user_bd[c.message.chat.id].config['id_last_messages'])
        user_bd[c.message.chat.id].config['bool_city'] = True
    elif user_bd[c.message.chat.id].config['check_choice_city'] and user_bd[c.message.chat.id].config['bool_city']:
        bot.send_message(user_bd[c.message.chat.id].id_user, "–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–µ—Å—Ç–∏? (–ú–∞–∫—Å. 10)")
        user_bd[c.message.chat.id].id_city = user_bd[c.message.chat.id].data['suggestions'][0]['entities'][int(c.data)][
            'destinationId']

        patterns_span = re.compile(r'<.*?>')

        user_bd[c.message.chat.id].config['check_choice_city'] = True


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as ex:
            # TODO –î–æ—Ä–∞–±–æ—Ç–∞—å –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            pass
