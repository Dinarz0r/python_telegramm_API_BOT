import re

from users import Users
from utility import next_step_city, config, next_step_count_hotels, next_step_count_photo, SearchHotel
from telebot import types, apihelper
from utility import bot, user_bd

info = '‚óè /help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n' \
       '‚óè /lowprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /highprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /bestdeal ‚Äî –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n' \
       '‚óè /history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π'


@bot.message_handler(commands=['start', 'help', 'lowprice', 'highprice', 'bestdeal', 'history'])
def handle_start_help(message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö
    –∫–æ–º–∞–Ω–¥: /start, /help, /lowprice, /highprice, /bestdeal, /history

    :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type: message: types.Message
    """
    if not user_bd.get(message.from_user.id):
        user_bd[message.from_user.id] = Users(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=False)
    btn_a = types.KeyboardButton('üè®–ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å')
    btn_b = types.KeyboardButton('üìó –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')
    # btn_c = types.KeyboardButton('üöß –û —Å–µ—Ä–≤–∏—Å–µ')
    markup.row(btn_a, btn_b)
    # markup.row(btn_c)
    if message.text == '/start':
        start_help_text = f"–ü—Ä–∏–≤–µ—Ç {user_bd[message.from_user.id].username}, —è –ë–û–¢ Too Easy Travel‚úÖ,\n" \
                          "–ò —è —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –æ—Ç–µ–ª—å üè®"
        bot.send_message(message.from_user.id, start_help_text, reply_markup=markup)
    elif message.text == '/help':
        bot.send_message(message.from_user.id, info, reply_markup=markup)
    elif message.text in ['/lowprice', '/highprice']:
        user_bd[message.from_user.id].search_method = (
            'PRICE' if message.text == '/lowprice' else 'PRICE_HIGHEST_FIRST')
        msg = bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, next_step_city)
    elif message.text == '/bestdeal':
        user_bd[message.from_user.id].search_method = 'best_deal'
        print('–º–µ—Ç–æ–î', user_bd[message.from_user.id].search_method)
        msg = bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, next_step_city)
    elif message.text == '/history':
        bot.send_message(message.from_user.id, user_bd[message.from_user.id].history, parse_mode="Markdown")


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    1. 'üè®–ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å' - –≤—ã–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –æ–∫–Ω–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
    2. 'üìó –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ' - –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type: message: types.Message
    """
    if not user_bd.get(message.from_user.id):
        user_bd[message.from_user.id] = Users(message)
    if message.text == 'üè®–ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å':
        user_bd[message.from_user.id].clear_cache()
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(text='–°–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –≤ –≥–æ—Ä–æ–¥–µ', callback_data='low_price'),
            types.InlineKeyboardButton(text='–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –≤ –≥–æ—Ä–æ–¥–µ', callback_data='high_price'),
            types.InlineKeyboardButton(text='—Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞', callback_data='best_deal'),
            row_width=True)
        massage_info = bot.send_message(message.from_user.id, "üîé –≤—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞", reply_markup=markup)

        user_bd[message.from_user.id].config['id_last_messages'] = massage_info.message_id
    elif message.text == 'üìó –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ':
        bot.send_message(message.from_user.id, info)


@bot.callback_query_handler(func=lambda c: True)
def inline(c):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ "–∫–Ω–æ–ø–∫–∏" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –æ–∫–Ω–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞.

    :param c: response –æ–±—ä–µ–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.
    :return:
    """
    if c.data in ['low_price', 'high_price']:
        bot.delete_message(c.message.chat.id, message_id=c.message.id)
        user_bd[c.message.chat.id].search_method = ('PRICE' if c.data == 'low_price' else 'PRICE_HIGHEST_FIRST')
        print('–º–µ—Ç–æ–î', user_bd[c.message.chat.id].search_method)
        msg = bot.send_message(c.message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, next_step_city)
    elif c.data == 'best_deal':
        bot.delete_message(c.message.chat.id, message_id=c.message.id)
        user_bd[c.message.chat.id].search_method = 'best_deal'
        print('–º–µ—Ç–æ–î', user_bd[c.message.chat.id].search_method)
        msg = bot.send_message(c.message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, next_step_city)
    elif c.data.startswith('choice_city_'):
        choice_city = int(re.sub(r'choice_city_', '', c.data))
        user_bd[c.message.chat.id].id_city = \
            user_bd[c.message.chat.id].cache_data['suggestions'][0]['entities'][choice_city][
                'destinationId']
        apihelper.delete_message(config['TELEGRAM_API_TOKEN'], c.message.chat.id, c.message.message_id)
        print('–≤—ã–±—Ä–∞–Ω–Ω—ã–π id –≥–æ—Ä–æ–¥–∞', user_bd[c.message.chat.id].id_city)

        msg2 = bot.send_message(c.message.chat.id,
                                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ? (–º–∞–∫—Å. 25)')
        bot.register_next_step_handler(msg2, next_step_count_hotels)
    elif c.data in ['yes_photo', 'no_photo']:
        bot.delete_message(c.message.chat.id, message_id=c.message.id)
        user_bd[c.message.chat.id].photo = (True if c.data == 'yes_photo' else False)
        print(user_bd[c.message.chat.id].photo)
        if user_bd[c.message.chat.id].photo:
            msg2 = bot.send_message(c.message.chat.id,
                                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ? (–º–∞–∫—Å. 4)')
            bot.register_next_step_handler(msg2, next_step_count_photo)
        else:
            SearchHotel.show_hotels(c)

        print('–§–õ–ê–ì –§–û–¢–û', user_bd[c.message.chat.id].photo)


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as ex:
            pass
