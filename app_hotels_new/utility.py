import json
import re
import threading
from datetime import date, timedelta
import requests
from telebot import TeleBot, apihelper, types
from dotenv import dotenv_values

user_bd = dict()
config = dotenv_values(".env")
bot = TeleBot(config['TELEGRAM_API_TOKEN'])


def check_method(message: types.Message, text_error):
    if message.text in ['/help', '/lowprice', '/highprice', '/bestdeal', '/history', '/start', 'üè®–ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å',
                        'üìó –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ']:
        return True, bot.send_message(message.chat.id, text_error)


def check_language(text: str) -> str:
    """
    –§-—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏–Ω–∞—á–µ —Ä—É—Å—Å–∫–∏–π, –¥–ª—è —Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ GET –ó–∞–ø—Ä–æ—Å–æ–≤
    :param text: –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞
    :return: 'en_US' –∏–ª–∏ 'ru_RU'
    """
    if re.findall(r'[a-zA-Z -]', text):
        return "en_US"
    else:
        return "ru_RU"


def mess_wait(stop_event, chat_id: int, message_id: int, text: str, bot) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç request.GET()
    —Ä–∞–±–æ—Ç–∞—é—â–∞—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.
    """
    count_point = 0
    while not stop_event.wait(0.2):
        if count_point == 0:
            point = '/'
        elif count_point == 1:
            point = '-'
        elif count_point == 2:
            point = '\\'
        else:
            point = '|'
            count_point = -1
        bot.edit_message_text(f"{text}{point}", chat_id=chat_id, message_id=message_id, parse_mode="Markdown")
        count_point += 1


class SearchHotel:
    """
    –ö–ª–∞—Å—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º–æ–π –æ—Ç request.
    """
    headers = {
        'x-rapidapi-key': config['RAPID_API_TOKEN3'],
        'x-rapidapi-host': "hotels4.p.rapidapi.com"
    }

    @classmethod
    def search_city_data(cls, bot, message):
        """
        –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É get –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        –ø–æ —É—Ç–æ—á–Ω–µ–Ω–∏—é –∏—Å–∫–æ–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ –æ–±—ä–µ–∫—Ç User –∫–µ—à–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.

        :param bot: –æ–±—ä–µ–∫—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
        :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        url = "https://hotels4.p.rapidapi.com/locations/search"
        querystring = {"query": message.text, "locale": user_bd[message.chat.id].language}
        message_info = bot.send_message(message.from_user.id, '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥—É')
        pill2kill = threading.Event()
        wait_effect = threading.Thread(target=mess_wait,
                                       args=(pill2kill, message_info.chat.id, message_info.id, message_info.text, bot))
        wait_effect.start()
        response = requests.get(url, headers=cls.headers, params=querystring, timeout=10)
        if response.status_code != 200:
            bot.send_message(message.from_user.id, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã 15 –º–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ')
        pill2kill.set()
        wait_effect.join()
        apihelper.delete_message(config['TELEGRAM_API_TOKEN'], message_info.chat.id, message_info.id)
        user_bd[message.from_user.id].cache_data = json.loads(response.text)
        patterns_span = re.compile(r'<.*?>')
        if user_bd[message.from_user.id].cache_data['suggestions'][0]['entities']:
            markup = types.InlineKeyboardMarkup()
            count = 0
            for entities_city in user_bd[message.from_user.id].cache_data['suggestions'][0]['entities']:
                add = types.InlineKeyboardButton(text=patterns_span.sub('', entities_city['caption']),
                                                 callback_data=f'choice_city_{count}', )
                markup.add(add)
                count += 1
            bot.send_message(message.from_user.id, "üåç –£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=markup)
        else:
            bot.send_message(message.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚õîÔ∏è')

    @classmethod
    def search_hotels(cls, bot, message):
        """
        –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞

        :param bot: –æ–±—ä–µ–∫—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
        :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        url = "https://hotels4.p.rapidapi.com/properties/list"

        querystring = {
            "destinationId": user_bd[message.from_user.id].id_city,
            "pageNumber": "1",
            "pageSize": f"{user_bd[message.from_user.id].count_show_hotels}",
            "checkIn": date.today() + timedelta(days=1),
            "checkOut": date.today() + timedelta(days=2),
            "adults1": "1",
            "sortOrder": user_bd[message.from_user.id].search_method,
            "locale": user_bd[message.chat.id].language,
            "currency": "RUB",
            "landmarkIds": "city center"
        }

        if user_bd[message.from_user.id].search_method == 'best_deal':
            querystring.update({"pageSize": "25",
                                "priceMin": user_bd[message.from_user.id].price_min_max['min'],
                                "priceMax": user_bd[message.from_user.id].price_min_max['max'],
                                "sortOrder": "PRICE",
                                "landmarkIds": "city center"})
        message_info = bot.send_message(message.from_user.id, '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π')
        pill2kill = threading.Event()
        wait_effect = threading.Thread(target=mess_wait,
                                       args=(pill2kill, message_info.chat.id, message_info.id, message_info.text, bot))
        wait_effect.start()
        response = requests.get(url, headers=cls.headers, params=querystring)
        pill2kill.set()
        wait_effect.join()
        apihelper.delete_message(config['TELEGRAM_API_TOKEN'], message_info.chat.id,
                                 message_info.id)
        user_bd[message.from_user.id].cache_data = json.loads(response.text)

    @classmethod
    def show_hotels(cls, message):
        """
        –§-—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π
        –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        url_get_photo = "https://hotels4.p.rapidapi.com/properties/get-hotel-photos"
        best_deal_view = 0
        for i in user_bd[message.from_user.id].cache_data['data']['body']['searchResults']['results']:
            if user_bd[message.from_user.id].distance_min_max \
                    and user_bd[message.from_user.id].search_method == 'best_deal':
                min_dist = user_bd[message.from_user.id].distance_min_max.get('min')
                max_dist = user_bd[message.from_user.id].distance_min_max.get('max')
                dist_center = int(re.findall(r'\d+', i["landmarks"][0]["distance"])[0])
                if not min_dist <= dist_center <= max_dist:
                    continue
                else:
                    best_deal_view += 1
                    if best_deal_view > user_bd[message.from_user.id].count_show_hotels:
                        break
            i_text = f'*–ò–º—è: {i["name"]}*\n' \
                     f'–ê–¥—Ä–µ—Å: {i["address"]["countryName"]}, {i["address"]["locality"]}, ' \
                     f'{i["address"]["streetAddress"]}\n' \
                     f'–û—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {i["landmarks"][0]["distance"]}\n–¶–µ–Ω–∞ {i["ratePlan"]["price"]["current"]}'
            if not user_bd[message.from_user.id].photo:
                bot.send_message(message.from_user.id, i_text, parse_mode="Markdown")
            else:
                message_info = bot.send_message(message.from_user.id, f'–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è *{i["name"]}*',
                                                parse_mode="Markdown")
                pill2kill = threading.Event()
                wait_effect = threading.Thread(target=mess_wait,
                                               args=(
                                                   pill2kill, message_info.chat.id, message_info.id, message_info.text,
                                                   bot))
                wait_effect.start()
                response = requests.get(url_get_photo, headers=cls.headers, params={"id": i["id"]})
                data = json.loads(response.text)
                if data:
                    photo_list = [
                        types.InputMediaPhoto(data['hotelImages'][0]['baseUrl'].format(size='l'), caption=i_text,
                                              parse_mode="Markdown")
                    ]
                    if len(data['hotelImages']) < user_bd[message.from_user.id].count_show_photo:
                        count_photo = len(data['hotelImages'])
                    else:
                        count_photo = user_bd[message.from_user.id].count_show_photo
                    if count_photo > 1:
                        for index in range(1, count_photo):
                            photo_list.append(
                                types.InputMediaPhoto(data['hotelImages'][index]['baseUrl'].format(size='l')))
                    bot.send_media_group(message.from_user.id, photo_list)
                    pill2kill.set()
                    wait_effect.join()
                    apihelper.delete_message(config['TELEGRAM_API_TOKEN'], message_info.chat.id,
                                             message_info.id)
                    photo_list.clear()
                else:
                    bot.send_message(message.from_user.id, i_text, parse_mode="Markdown")

        bot.send_message(message.from_user.id,
                         '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω‚úÖ')
        user_bd[message.from_user.id].save_history()
        user_bd[message.from_user.id].clear_cache()


def next_step_city(mess):
    """
    –§-—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
    :param mess: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if check_method(mess, '–£–≤—ã –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞, —Ç–∞–∫ –Ω–µ–ª—å–∑—è. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞'):
        pass
    elif len(re.findall(r'[–ê-–Ø–∞-—è–Å—ëa-zA-Z0-9 -]+', mess.text)) > 1:
        err_city = bot.send_message(mess.chat.id,
                                    '–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –≤–≤–æ–¥–∏ –µ—â–µ —Ä–∞–∑ –≥–æ—Ä–æ–¥.')
        bot.register_next_step_handler(err_city, next_step_city)
    else:
        user_bd[mess.chat.id].language = check_language(mess.text)
        user_bd[mess.chat.id].search_city = mess.text
        SearchHotel.search_city_data(bot, mess)


def next_step_count_hotels(mess):
    """
    –§-—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ –∏—Å–∫–æ–º—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.
    –í —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤—ã–∑—ã–≤–∞–µ–º —Ñ-—Ü–∏—é range_request_price.
    :param mess: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if check_method(mess, '–£–≤—ã –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª-–≤–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞, —Ç–∞–∫ –Ω–µ–ª—å–∑—è. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞'):
        pass
    elif not isinstance(mess.text, str) or not mess.text.isdigit():
        err_num = bot.send_message(mess.chat.id,
                                   '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä! –≤–≤–æ–¥–∏ –µ—â–µ —Ä–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        bot.register_next_step_handler(err_num, next_step_count_hotels)
    else:
        if int(mess.text) > 25:
            user_bd[mess.chat.id].count_show_hotels = 25
            bot.send_message(mess.chat.id, '–£–≤—ã —è –∑–∞—Å—á–∏—Ç–∞–ª —ç—Ç–æ –∑–∞ 25')

        else:
            user_bd[mess.chat.id].count_show_hotels = int(mess.text)

        if user_bd[mess.chat.id].search_method != 'best_deal':
            SearchHotel.search_hotels(bot, mess)
            request_photo(mess)
        else:
            msg_price = bot.send_message(mess.chat.id,
                                         '–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –æ—Ç–µ–ª—è –∑–∞ —Å—É—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä (1000-4000)')
            bot.register_next_step_handler(msg_price, range_request_price)


def range_request_price(mess):
    """
    –§-—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.
    :param mess: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    price_min_max_list = list(map(int, re.findall(r'\d+', mess.text)))
    if check_method(mess, '–£–≤—ã –≤—ã –≤–≤–µ–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞, —Ç–∞–∫ –Ω–µ–ª—å–∑—è. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞'):
        pass
    elif not isinstance(mess.text, str) or len(price_min_max_list) != 2:
        err_num = bot.send_message(mess.chat.id,
                                   '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —á–∏—Å–ª–∞! –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑!')
        bot.register_next_step_handler(err_num, range_request_price)
    else:
        user_bd[mess.chat.id].price_min_max['min'] = min(price_min_max_list)
        user_bd[mess.chat.id].price_min_max['max'] = max(price_min_max_list)
        msg_dist = bot.send_message(mess.chat.id,
                                    f'–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤ {"–∫–º." if user_bd[mess.chat.id].language == "ru_RU" else "–º–∏–ª—è—Ö"} –ü—Ä–∏–º–µ—Ä (1-5)')
        bot.register_next_step_handler(msg_dist, search_distance)


def search_distance(mess):
    """
    –§-—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ –∏—Å–∫–æ–º—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.
    :param mess: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    distance_list = list(map(int, re.findall(r'\d+', mess.text)))
    if check_method(mess, '–£–≤—ã –≤—ã –≤–≤–µ–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞, —Ç–∞–∫ –Ω–µ–ª—å–∑—è. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞'):
        pass
    elif not isinstance(mess.text, str) or len(distance_list) != 2:
        err_num = bot.send_message(mess.chat.id,
                                   '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —á–∏—Å–ª–∞! –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑!')
        bot.register_next_step_handler(err_num, search_distance)
    else:
        user_bd[mess.chat.id].distance_min_max['min'] = min(distance_list)
        user_bd[mess.chat.id].distance_min_max['max'] = max(distance_list)
        SearchHotel.search_hotels(bot, mess)
        request_photo(mess)


def request_photo(mess):
    """
    –§-—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º –±—É–¥–µ–º –ª–∏ –∏—Å–∫–∞—Ç—å —Ñ–æ—Ç–æ?
    :param mess: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    markup = types.InlineKeyboardMarkup()
    yes_photo_hotels = types.InlineKeyboardButton(text='‚úÖ–î–∞', callback_data='yes_photo')
    no_photo_hotels = types.InlineKeyboardButton(text='‚ùå–ù–µ—Ç', callback_data='no_photo')
    markup.add(yes_photo_hotels, no_photo_hotels)
    bot.send_message(mess.chat.id, "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π?", reply_markup=markup)


def next_step_count_photo(mess):
    """
    –§-—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª-–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ—Ç–µ–ª—è–º–∏.
    :param mess: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    """
    if check_method(mess, '–£–≤—ã –≤—ã –≤–≤–µ–ª–∏ –∫–æ–ª-—Ñ–æ —Ñ–æ—Ç–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞, —Ç–∞–∫ –Ω–µ–ª—å–∑—è. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞'):
        pass
    elif not isinstance(mess.text, str) or not mess.text.isdigit():
        err_num = bot.send_message(mess.chat.id,
                                   '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä! –≤–≤–æ–¥–∏ –µ—â–µ —Ä–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        bot.register_next_step_handler(err_num, next_step_count_photo)
    else:
        if int(mess.text) > 4:
            user_bd[mess.chat.id].count_show_photo = 4
            bot.send_message(mess.chat.id, '–£–≤—ã —è –∑–∞—Å—á–∏—Ç–∞–ª —ç—Ç–æ –∑–∞ 4')

        else:
            user_bd[mess.chat.id].count_show_photo = int(mess.text)
        SearchHotel.show_hotels(mess)
